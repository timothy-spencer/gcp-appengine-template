version: 2
jobs:
  enable_apis:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Setup Google Cloud SDK
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
            gsutil mb gs://gcp-test-terraform-state-$GOOGLE_PROJECT_ID || true
      - run:
          name: Enabling APIs
          command: ./terraform/enable-apis.sh
      - run:
          name: Enable Audit Logging
          command: ./terraform/enable-audit-logs.sh
  plan_terraform:
    docker:
      - image: hashicorp/terraform:0.11.11
    steps:
      - checkout
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Initialize Terraform
          command: |
            export TF_VAR_project_id=$GOOGLE_PROJECT_ID
            cd terraform && terraform init -backend-config="bucket=gcp-test-terraform-state-$GOOGLE_PROJECT_ID" && terraform plan -input=false
  apply_terraform:
    docker:
      - image: hashicorp/terraform:0.11.11
    steps:
      - checkout
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Apply Terraform
          command: |
            export TF_VAR_project_id=$GOOGLE_PROJECT_ID
            cd terraform && terraform init -backend-config="bucket=gcp-test-terraform-state-$GOOGLE_PROJECT_ID" && terraform apply -input=false -auto-approve
  deploy: &deploy
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "getting-started-java/helloworld-springboot/pom.xml" }}
            - v1-dependencies-
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Setup Google Cloud SDK
          command: |
            export GCLOUD_SDK_VERSION=229
            curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-$GCLOUD_SDK_VERSION.0.0-linux-x86_64.tar.gz -o ./gcloud-sdk.tar.gz
            tar xzf gcloud-sdk.tar.gz -C ~
            rm gcloud-sdk.tar.gz
            export PATH=~/google-cloud-sdk/bin:$PATH
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
            echo 'export PATH=~/google-cloud-sdk/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run: cd getting-started-java/helloworld-springboot && mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "getting-started-java/helloworld-springboot/pom.xml" }}
  deploy-dev:
    <<: *deploy
    steps:
      - run: cd getting-started-java/helloworld-springboot && mvn appengine:deploy --version=dev --no-promote
  deploy-staging:
    <<: *deploy
    steps:
      - run: cd getting-started-java/helloworld-springboot && mvn appengine:deploy --version=staging --no-promote
  deploy-prod:
    <<: *deploy
    steps:
      - run: cd getting-started-java/helloworld-springboot && mvn appengine:deploy

workflows:
  version: 2
  terraform:
    jobs:
      - enable_apis
      - plan_terraform:
          requires: 
            - enable_apis
      - hold_terraform:
          type: approval
          requires:
            - plan_terraform
      - apply_terraform:
          requires:
            - hold_terraform
      - production_deploy_hold:
          type: approval
      - deploy-dev:
          filters:
            branches:
              only:
                - dev
      - deploy-staging:
          filters:
            branches:
              only:
                - master
      - deploy-prod:
          requires:
            - production_deploy_hold
            - deploy-staging
          filters:
            branches:
              only:
                - master
