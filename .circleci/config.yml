version: 2
jobs:
  enable_apis:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Store Service Account key
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Setup Google Cloud SDK
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
            gsutil mb gs://gcp-terraform-state-$GOOGLE_PROJECT_ID || true
      - run:
          name: Enabling APIs
          command: ./terraform/enable-apis.sh
      - run:
          name: Enable Audit Logging
          command: ./terraform/enable-audit-logs.sh
      - run:
          name: make sure jq is installed
          command: apt-get install -y jq
      - run:
          name: Enable app to do schema migrations
          command: |
            export PROJECT_NUMBER=`gcloud projects describe ${GOOGLE_PROJECT_ID} --format=json | jq -r .projectNumber`
            gcloud projects add-iam-policy-binding ${GOOGLE_PROJECT_ID} --member=serviceAccount:${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com --role=roles/editor
  plan_terraform:
    docker:
      - image: hashicorp/terraform:0.11.11
    steps:
      - checkout
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Initialize Terraform
          command: |
            export TF_VAR_project_id=$GOOGLE_PROJECT_ID
            cd terraform && terraform init -backend-config="bucket=gcp-terraform-state-$GOOGLE_PROJECT_ID" && terraform plan -input=false
  apply_terraform:
    docker:
      - image: hashicorp/terraform:0.11.11
    steps:
      - checkout
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Setup Google Cloud SDK
          command: |
            export GCLOUD_SDK_VERSION=204
            curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-$GCLOUD_SDK_VERSION.0.0-linux-x86_64.tar.gz -o ./gcloud-sdk.tar.gz
            tar xzf gcloud-sdk.tar.gz -C ~
            rm gcloud-sdk.tar.gz
            export PATH=~/google-cloud-sdk/bin:$PATH
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
            echo 'export PATH=~/google-cloud-sdk/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Apply Terraform
          command: |
            export TF_VAR_project_id=$GOOGLE_PROJECT_ID
            cd terraform && terraform init -backend-config="bucket=gcp-terraform-state-$GOOGLE_PROJECT_ID" && terraform apply -input=false -auto-approve
            terraform output > /tmp/tf-output.json
            gsutil cp /tmp/tf-output.json gs://gcp-terraform-state-$GOOGLE_PROJECT_ID
            rm -f /tmp/tf-output.json
  test-rails:
    docker:
      - image: circleci/ruby:2.5.3-stretch
    steps:
      - checkout
      - run:
          name: Run Tests!
          command: echo "not tested! XXX"
  deploy-rails:
    docker:
      - image: circleci/ruby:2.5.3-stretch
    steps:
      - checkout
      - run:
          name: Store Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "rails-example/Gemfile.lock" }}
            - v1-dependencies-
      - run:
          name: Install Ruby dependencies
          command: |
            cd rails-example
            BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ") gem install bundler
            bundle check || bundle install
      - save_cache:
          key: v1-dependencies-{{ checksum "rails-example/Gemfile.lock" }}
          paths:
            - rails-example/vendor/bundle
      - run:
          name: Setup Google Cloud SDK
          command: |
            export GCLOUD_SDK_VERSION=204
            curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-$GCLOUD_SDK_VERSION.0.0-linux-x86_64.tar.gz -o ./gcloud-sdk.tar.gz
            tar xzf gcloud-sdk.tar.gz -C ~
            rm gcloud-sdk.tar.gz
            export PATH=~/google-cloud-sdk/bin:$PATH
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
            echo 'export PATH=~/google-cloud-sdk/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: get tf output for config
          command: gsutil cp gs://gcp-terraform-state-$GOOGLE_PROJECT_ID/tf-output.json /tmp/tf-output.json
      - run:
          name: prepare app engine config
          command: |
            export RAILS_SECRET=`jq -r .rails_secret < /tmp/tf-output.json`
            export CLOUDSQL_USERNAME=`jq -r .postgres_username < /tmp/tf-output.json`
            export CLOUDSQL_PASSWORD=`jq -r .postgres_password < /tmp/tf-output.json`
            export CONNECTION_NAME=`jq -r .postgres_instance < /tmp/tf-output.json`
            rm -f /tmp/tf-output.json
            sed -i tmp "s/xSECRET_KEY_BASEx/${RAILS_SECRET}/" rails-example/app.yaml
            sed -i tmp "s/xCLOUDSQL_USERNAMEx/${CLOUDSQL_USERNAME}/" rails-example/app.yaml
            sed -i tmp "s/xCLOUDSQL_PASSWORDx/${CLOUDSQL_PASSWORD}/" rails-example/app.yaml
            sed -i tmp "s/xCLOUDSQL_INSTANCEx/${CONNECTION_NAME}/" rails-example/app.yaml
      - run:
          name: deploy to app engine and run db migrations
          command: |
            cd rails-example
            bundle exec bin/rails assets:precompile
            if [ "$CIRCLE_BRANCH" = "master" ] ; then
              gcloud app deploy --no-promote
              bundle exec rake appengine:exec -- bundle exec rake db:migrate
              # XXX clean up old versions?
            else
              gcloud app deploy --no-promote --version=${CIRCLE_BRANCH}
              bundle exec rake appengine:exec --version=${CIRCLE_BRANCH} -- bundle exec rake db:migrate
            fi
  promote-rails-prod:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Store Service Account key
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Setup Google Cloud SDK
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud config set project $GOOGLE_PROJECT_ID
      - run:
          name: Promote rails-example to production
          command: |
            echo gcloud app services set-traffic default --splits XXXVERSION=1

workflows:
  version: 2
  terraform:
    jobs:
      - enable_apis
      - plan_terraform:
          requires: 
            - enable_apis
      - hold_terraform:
          type: approval
          requires:
            - plan_terraform
      - apply_terraform:
          requires:
            - hold_terraform
  deploy-rails-example:
    jobs:
      - deploy-rails
      - test-rails:
          requires:
            - deploy-rails
      - hold-rails-prod:
          type: approval
          requires:
            - test-rails
      - promote-rails-prod:
          requires:
            - hold-rails-prod
          filters:
            branches:
              only:
                - master
